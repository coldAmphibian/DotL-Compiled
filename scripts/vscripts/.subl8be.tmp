require("util")
require(GetMapName() .. "_brush_locations") --this file contains one variable named brush_locations
											--the variable contains arrays of coordinates keyed with the name of the brush they're associated with

--=================================================================================
--Brush Scripts
--=================================================================================

BrushTable = {}

--[[function BrushStart(trigger)
	local name = trigger.caller:GetEntityIndex()
	--Say(nil, "Brought to you by: " .. trigger.activator:GetName(), false)
	if BrushTable[name] == nil then
		BrushTable[name] = {["entities"] = {}, ["revealers"] = {}, ["activated"] = 0} 					
	end

	if trigger.activator:GetUnitName() == "npc_lol_brush_vision" then 				
		--print(trigger.activator:GetUnitName())									
		BrushTable[name]["revealers"][trigger.activator] = true 					
		--print(trigger.activator:GetUnitName())
	else
		--print(trigger.activator:GetName())
		if trigger.activator:GetUnitName() ~= "npc_dota_courier" then
			giveUnitDataDrivenModifier(trigger.activator, trigger.activator, "modifier_lol_in_brush", -1)
		end
		BrushTable[name]["entities"][trigger.activator] = true
		--print("starting updating for " .. name)

		thisEntity:SetContextThink("brush-thinker-for-" .. name, function(trigger)
				-- loops through each revealer
				for revealer, v in pairs(BrushTable[name]["revealers"]) do 
					local largest_vr = 0
					-- This gets the largest vision the revealer should set its vision to								
					for entity, v in pairs(BrushTable[name]["entities"]) do
						-- Checks if the entity is touching the brush
						if trigger:IsTouching(entity) then
							-- Only gets vision for things on correct team
							if entity:GetTeam() == revealer:GetTeam() then
								local entity_vr = entity:GetCurrentVisionRange()
								local d = CalcDistanceBetweenEntityOBB(entity, revealer)
								largest_vr = math.max(entity_vr - d, largest_vr)
							end
						-- Else: remove it from the table, this prevents the script from crashing when something dies in the brush
						else
							--print("entity removed")
							BrushTable[name]["entities"][entity] = nil
						end
					end
					-- this changes vision
					revealer:SetDayTimeVisionRange(largest_vr)
					revealer:SetNightTimeVisionRange(largest_vr)
				end

				-- This will check if there are any entities remaining from your team inside the brush, if not. It stops the checking loop
				for revealer, v in pairs(BrushTable[name]["revealers"]) do
					for entity, v in pairs(BrushTable[name]["entities"]) do
						-- if there's an entity of the team as the revealer
						if entity:GetTeam() == revealer:GetTeam() then
							return 0.05
						end
					end
				end
				for revealer, v in pairs(BrushTable[name]["revealers"]) do
					revealer:RemoveSelf()
				end
				BrushTable[name]["revealers"] = {}
				return nil
			end, 0)
	end
end]]
 
function BrushEnd(trigger)
	trigger.activator:RemoveModifierByName("modifier_lol_in_brush")
	BrushTable[trigger.caller:GetEntityIndex()]["entities"][trigger.activator] = nil
	--Say(brush, "You have entered: " .. "brush" .. trigger.caller:GetEntityIndex(), false)
end

vision_spawned = 0

function CheckBrushTable(name)
	--creates table if table doesn't exist
	if BrushTable[name] == nil then
		BrushTable[name] = {["entities"] = {}, ["revealers"] = {}, ["activated"] = 0} 					
	end
end

function ActivateBrush(trigger, name)
	--spawns revealers
	local blocker_name = (trigger.caller:GetName()):Split("_")[1] .. "_" .. (trigger.caller:GetName()):Split("_")[2]
	local found = 0

	for brush, coordinates in pairs(brush_locations) do
		for revealer, _ in pairs(BrushTable[name]["revealers"]) do
			if revealer:GetTeam() == trigger.activator:GetTeam() then
				found = 1
				break
			end
		end
		if found == 0 then
			for _, coord in pairs(coordinates) do
				CreateUnitByName("npc_lol_brush_vision", coord, false, nil, nil, trigger.activator:GetTeam())
			end
		end
	end
end


	--[[for brush, coordinates in pairs(brush_locations) do
				if brush == blocker_name and BrushTable[name]["activated"] == 0 then
					print("Spawning Revealers")
					BrushTable[name]["activated"] = 1
					BrushTable[name]["entities"][trigger.activator] = true
		
		
			end
		end]]

function AddUnitsToTable(trigger, name)

	if trigger.activator:GetUnitName() == "npc_lol_brush_vision" then
		BrushTable[name]["revealers"][trigger.activator] = true 
	else
		if trigger.activator:GetUnitName() ~= "npc_dota_courier" then
			giveUnitDataDrivenModifier(trigger.activator, trigger.activator, "modifier_lol_in_brush", -1)
		end
		if BrushTable[name]["entities"][trigger.activator] == nil then
			BrushTable[name]["entities"][trigger.activator] = true
		end
	end
end

function ChangeBrushVisionRange(trigger, name)
	for revealer, v in pairs(BrushTable[name]["revealers"]) do 
		local largest_vr = 0
		-- This gets the largest vision the revealer should set its vision to								
		for entity, v in pairs(BrushTable[name]["entities"]) do
			-- Checks if the entity is touching the brush
			if trigger:IsTouching(entity) then
				-- Only gets vision for things on correct team
				if entity:GetTeam() == revealer:GetTeam() then
					local entity_vr = entity:GetCurrentVisionRange()
					local d = CalcDistanceBetweenEntityOBB(entity, revealer)
					largest_vr = math.max(entity_vr - d, largest_vr)
				end
			-- Else: remove it from the table, this prevents the script from crashing when something dies in the brush
			else
				--print("entity removed")
				BrushTable[name]["entities"][entity] = nil
			end
		end
		-- this changes vision
		revealer:SetDayTimeVisionRange(largest_vr)
		revealer:SetNightTimeVisionRange(largest_vr)
	end
end

function BrushThinker(trigger, name)
	thisEntity:SetContextThink("brush-thinker-for-" .. name, function(trigger)
		-- This will check if there are any entities remaining from your team inside the brush, if not. It stops the checking loop
		ChangeBrushVisionRange(trigger, name)
		for revealer, v in pairs(BrushTable[name]["revealers"]) do
			for entity, v in pairs(BrushTable[name]["entities"]) do
				-- if there's an entity of the team as the revealer
				if entity:GetTeam() == revealer:GetTeam() and trigger:IsTouching(entity) then
					return 0.05
				end
			end
			revealer:RemoveSelf()
			BrushTable[name] = {["entities"] = {}, ["revealers"] = {}, ["activated"] = 0}
		end

		--we get here if there's nothing in the ent table
		return nil
	end, 0)
end	

function BrushStart(trigger)
	local name = trigger.caller:GetEntityIndex()

	CheckBrushTable(name)
	ActivateBrush(trigger, name)
	AddUnitsToTable(trigger, name)
	BrushThinker(trigger, name)
end


--Stops units from getting stuck
function AntiBlockStart(trigger)
	if trigger.activator then
		trigger.activator:AddNewModifier(trigger.activator, nil, "modifier_phased", nil)
	end
end
 
function AntiBlockEnd(trigger)
	if trigger.activator then
		trigger.activator:RemoveModifierByName("modifier_phased")
	end
end
 
function giveUnitDataDrivenModifier(source, target, modifier, dur)
    --source and target should be hscript-units. The same unit can be in both source and target
    local item = CreateItem( "lol_modifiers", source, source)
    item:ApplyDataDrivenModifier(source, target, modifier, {duration=dur})
end